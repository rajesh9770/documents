Run 'gradle wrapper' to create gradlew
then run gradlew build, etc

task wrapper (type: Wrapper){
    gradleVersion = '2.6' ## if this line is not present, then it will use whatewver gradle install on the machine.
}
========================

What is task?
1) code that gradle executes
2) has lifecycle
3) has properties
4) has actions
5) has dependencies

task hello {
  doLast {
    println "Hello Gradle"
  }
}
=============================
project.ext.projectVersion = "3.0"
ext.projectVersion = "3.0"

project.task("Task1")

task("Task2")

task "Task3"

task Task4

Task4.description = "Task 4 Description"

Task4.doLast {println "This is Task 4"}

Task3 << {println "This is task 3"}

task Task5 << {println "this is task 5"}

Task5 << {println "Another closure"}

task Task6 {
  description "This is task 6"
  dependsOn Task5
  doFirst {
    println "Task 6 - First"
  }
  doLast {
    println "This is task 6 - version $projectVersion"
  }
}

Task6.doFirst {
  println "Another first"
}

Task6.dependsOn Task5
Task5.dependsOn Task4
============================
Initialization Phase: used to configure mutli project builds
Configuration Phase: Executed code in the task that's not the action, e.g
description
Execution phase: execute the task actions e.g. doFirst and doLast
===============================
Task Dependency:
A) add local dependencies:

dependencies {
  compile files ('libs/log4j.jar', 'lib/junit.jar')
}

B) Dependency on other projects

C) External libraries
    repositories{
        mavenLocal()
    }

D) Internal libraries
    repositories{
        url "http"//myrepo.mycompany.llc/maven2"
    }



To list dependencies use gradle  -q dependencies -configurations compile

gradle :controller:dependencies


--refresh-dependencies  to refresh dependencies this will download dependent jars
===============================
mustRunAfter
shouldRunAfter
finalizedBy
==============================
Building Java Project
add following line in build.gradle
apply plugin: 'java'
This adds many tasks like build, clean, javadoc, etc
Default Layout of code:
src/main/java
src/main/resources
src/test/java
src/test/resources

To override default:
sourceSets{
    main{
        java{
            srcDir 'src/java'        
        }
    resources{
          srcDir 'src/resource'
        }
    }
}

=====================
Daemon for longer builds:
1) gradle --daemon build
2) create a gradle.properties in side ~/.gradle and set org.gradle.daemon=true 

